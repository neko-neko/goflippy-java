apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'

version = "1.0.4"

allprojects {
    group = 'com.github.nekoneko.goflippy'
    version = "${version}"
    description = "goflippy client library"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'com.squareup.okhttp3:okhttp:3.10.0'
    testCompile(group: 'junit', name: 'junit', version: '4.12') {
        exclude module: 'hamcrest-core'
    }
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile 'org.mockito:mockito-core:2.21.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
    }
}

jacoco {
    toolVersion = '0.8.1'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

shadowJar {
    baseName = 'goflippy'

    dependencies {
        exclude(dependency('com.google.code.gson:.*:.*'))
    }
    relocate('com', 'shadow.com') {
        exclude("com.google.gson.*")
        exclude("com.google.gson.annotations.*")
        exclude("com.google.gson.internal.*")
        exclude("com.google.gson.internal.bind.*")
        exclude("com.google.gson.internal.bind.util.*")
        exclude("com.google.gson.reflect.*")
        exclude("com.google.gson.stream.*")
    }
    relocate('okhttp3', 'shadow.okhttp3')

    manifest {
        attributes("Implementation-Version": version)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar, shadowJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file:${System.getProperty('user.home')}/.m2/repository")
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
